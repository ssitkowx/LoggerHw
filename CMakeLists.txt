PROJECT                (LoggerMock)
CMAKE_MINIMUM_REQUIRED (VERSION 3.16)

SET (ProjectName Project)
SET (TestsName   Tests)
SET (LibraryName ${CMAKE_PROJECT_NAME}Lib)
SET (CurrentPath ${CMAKE_CURRENT_SOURCE_DIR})
SET (PackagesNames Logger Utils)

IF (EXISTS ${CurrentPath}/conanbuildinfo.cmake)
	INCLUDE (${CurrentPath}/conanbuildinfo.cmake)
ELSE()
	INCLUDE (${CurrentPath}/Conan/conanbuildinfo.cmake)
ENDIF()

CONAN_BASIC_SETUP ()

SET  (ProjectIncludePath                  ${CurrentPath}/${ProjectName})
FILE (GLOB_RECURSE ProjectFilesAndFolders ${ProjectIncludePath}/*)

SET  (TestIncludePath                     ${CurrentPath}/${TestsName})
FILE (GLOB_RECURSE TestFilesAndFolders    ${TestIncludePath}/*)

MACRO (GET_SUBDIRECTORIES_PATHS_LISTS main_path paths_lists)
    SET (directoryPathsLists "")
    FOREACH (subdirectoryPath ${main_path})
        GET_FILENAME_COMPONENT (directoryPath ${subdirectoryPath} PATH)
        SET (directoryPathsLists ${directoryPathsLists} ${directoryPath})
    ENDFOREACH ()

    LIST (REMOVE_DUPLICATES directoryPathsLists)
    SET  (${paths_lists} ${directoryPathsLists})
ENDMACRO ()

GET_SUBDIRECTORIES_PATHS_LISTS ("${ProjectFilesAndFolders}" ProjectPathsLists)
GET_SUBDIRECTORIES_PATHS_LISTS ("${TestFilesAndFolders}"    TestPathsLists)

MACRO (REMOVE_FILES directory)
	FILE (GLOB removeLists ${directory}/*)
	FOREACH (FILE ${removeLists})
		IF (EXISTS ${file})
			FILE (REMOVE ${file})
		ENDIF ()
	ENDFOREACH (FILE)
ENDMACRO ()

IF (NOT EXISTS "${CurrentPath}/Build/CMakeCache.txt")
    MESSAGE ("CMakeCache.txt does not exist")
    MESSAGE ("If this happend first time try use conan build . once more")
endif()

MACRO (FIND_IN_CMAKE_CACHE_FILE pattern result)
    FILE   (STRINGS           "${CurrentPath}/Build/CMakeCache.txt" FullResult REGEX ${pattern})	
    STRING (LENGTH            ${FullResult} ResFullLen)
    STRING (FIND              ${FullResult} "=" CharacterEqual)
	MATH   (EXPR ResStartPos "${CharacterEqual} + 1")
    MATH   (EXPR ResLen      "${ResFullLen} - ${ResStartPos}")
    STRING (SUBSTRING         ${FullResult} ${ResStartPos} ${ResLen} res)
	SET    (${result}         ${res})
ENDMACRO ()

MACRO (GET_PACKAGES_INCLUDES package_includes_paths)
    FOREACH (packageName ${PackagesNames})
        SET                      (Pattern "")
        STRING                   (PREPEND Pattern ${packageName} IncludePath)	
	    SET                      (Result "")
	    FIND_IN_CMAKE_CACHE_FILE (${Pattern} Result)
		LIST                     (APPEND ${package_includes_paths} ${Result})
    ENDFOREACH (packageName)
ENDMACRO()

MACRO (GET_PACKAGES_INCLUDES_LIBS packages_includes_libs)
    FOREACH (packageName ${PackagesNames})
		SET                      (Pattern "")
        STRING                   (PREPEND Pattern ${packageName} LibPath)	
	    SET                      (Result "")
	    FIND_IN_CMAKE_CACHE_FILE (${Pattern} Result)
		LIST                     (APPEND ${packages_includes_libs} ${Result})
    ENDFOREACH (packageName)
ENDMACRO ()

MACRO (GET_PACKAGES_LIBS packages_libs)
    FOREACH (packageName ${PackagesNames})
		SET                      (Pattern "")
        STRING                   (PREPEND Pattern ${packageName} LibName)	
	    SET                      (Result "")
	    FIND_IN_CMAKE_CACHE_FILE (${Pattern} Result)
		LIST                     (APPEND ${packages_libs} ${Result})
    ENDFOREACH (packageName)
ENDMACRO ()

GET_PACKAGES_INCLUDES     (PackageIncludesPaths)
GET_PACKAGES_INCLUDES_LIBS (PackageLibsPaths)
GET_PACKAGES_LIBS         (PackageLibsNames)

SET          (BuildPath ${CurrentPath}/Build)
REMOVE_FILES ("${BuildPath}")

SOURCE_GROUP               (TREE                       	      ${TestIncludePath} PREFIX "" FILES ${TestFilesAndFolders})
LINK_DIRECTORIES           (${TestsName}                      ${BuildPath}/lib ${PackageLibsPaths})
ADD_EXECUTABLE             (${TestsName}                      ${TestFilesAndFolders})
TARGET_INCLUDE_DIRECTORIES (${TestsName}   PUBLIC             ${ProjectPathsLists} ${TestPathsLists})
TARGET_LINK_LIBRARIES      (${TestsName}    		          ${LibraryName} ${PackageLibsNames})
TARGET_COMPILE_FEATURES    (${TestsName}   PUBLIC cxx_std_17)

SOURCE_GROUP               (TREE                       	      ${ProjectIncludePath} PREFIX "" FILES ${ProjectFilesAndFolders})
ADD_LIBRARY                (${LibraryName} STATIC             ${ProjectFilesAndFolders})
TARGET_INCLUDE_DIRECTORIES (${LibraryName} PUBLIC             ${ProjectPathsLists} ${PackageIncludesPaths})
TARGET_LINK_LIBRARIES      (${LibraryName}    		          ${CONAN_LIBS_GTEST})
TARGET_COMPILE_FEATURES    (${LibraryName} PUBLIC cxx_std_17)
