PROJECT(LoggerMock)
CMAKE_MINIMUM_REQUIRED(VERSION 3.16)

SET (ProjectName      Project)
SET (TestsName        Tests)
SET (LibraryName      ${CMAKE_PROJECT_NAME}Lib)
SET (ConanLibraryPath "C:/Users/sitko/.conan/data")
SET (CurrentPath      ${CMAKE_CURRENT_SOURCE_DIR})

IF(EXISTS ${CurrentPath}/conanbuildinfo.cmake)
	INCLUDE(${CurrentPath}/conanbuildinfo.cmake)
ELSE()
	INCLUDE(${CurrentPath}/Conan/conanbuildinfo.cmake)
ENDIF()

CONAN_BASIC_SETUP()

SET (ProjectIncludePath                  ${CurrentPath}/${ProjectName})
FILE(GLOB_RECURSE ProjectFilesInclude    ${ProjectIncludePath}/*.h ${ProjectIncludePath}/*.hxx)
FILE(GLOB_RECURSE ProjectFilesAndFolders ${ProjectIncludePath}/*)

SET (TestIncludePath                     ${CurrentPath}/${TestsName})
FILE(GLOB_RECURSE TestFilesInclude       ${TestIncludePath}/*.h ${TestIncludePath}/*.hxx)
FILE(GLOB_RECURSE TestFilesAndFolders    ${TestIncludePath}/*)

MACRO(GET_SUBDIRECTORIES_PATHS_LISTS main_path paths_lists)
    SET(directoryPathsLists "")
    FOREACH(subdirectoryPath ${main_path})
        GET_FILENAME_COMPONENT(directoryPath ${subdirectoryPath} PATH)
        SET(directoryPathsLists ${directoryPathsLists} ${directoryPath})
    ENDFOREACH()
    LIST(REMOVE_DUPLICATES directoryPathsLists)
    SET(${paths_lists} ${directoryPathsLists})
ENDMACRO()

SET(ProjectPathsLists "")
GET_SUBDIRECTORIES_PATHS_LISTS("${ProjectFilesAndFolders}" ProjectPathsLists)

SET(TestPathsLists "")
GET_SUBDIRECTORIES_PATHS_LISTS("${TestFilesAndFolders}" TestPathsLists)

MACRO(REMOVE_FILES directory)
	FILE(GLOB removeLists ${directory}/*)
	FOREACH(FILE ${removeLists})
		IF(EXISTS ${file})
			FILE(REMOVE ${file})
		ENDIF()
	ENDFOREACH(FILE)
ENDMACRO()

SET(BuildPath ${CurrentPath}/Build)
REMOVE_FILES("${BuildPath}")

MACRO(GET_CONAN_LIBRARIES_PATHS_LISTS conan_libraries_paths_lists)
    SET(conanLibraryPathsLists "")
    FOREACH(library ${CONAN_LIBS})
        SET(conanLibraryPathsLists ${conanLibraryPathsLists} ${ConanLibraryPath}/${library})
    ENDFOREACH()
    SET(${conan_libraries_paths_lists} ${conanLibraryPathsLists})
ENDMACRO()

SET(ConanLibrariesPathsLists "")
IF (NOT CONAN_LIBS STREQUAL "")
	GET_CONAN_LIBRARIES_PATHS_LISTS(ConanLibrariesPathsLists)
ENDIF()

SOURCE_GROUP               (TREE                       	      ${TestIncludePath} PREFIX "" FILES ${TestFilesAndFolders})
LINK_DIRECTORIES           (${TestsName}                      ${BuildPath}/lib)
ADD_EXECUTABLE             (${TestsName}                      ${TestFilesAndFolders} ${PackagesFilesInclude})
TARGET_INCLUDE_DIRECTORIES (${TestsName}   PUBLIC             ${ProjectPathsLists} ${TestPathsLists})
TARGET_LINK_LIBRARIES      (${TestsName}    		          ${LibraryName} ${PackagesLibsPath})
TARGET_COMPILE_FEATURES    (${TestsName}   PUBLIC cxx_std_17)

SOURCE_GROUP               (TREE                       	      ${ProjectIncludePath} PREFIX "" FILES ${ProjectFilesAndFolders})
ADD_LIBRARY                (${LibraryName} STATIC             ${ProjectFilesAndFolders} ${PackagesFilesInclude})
TARGET_INCLUDE_DIRECTORIES (${LibraryName} PUBLIC             ${ProjectPathsLists} ${LibsPaths})
TARGET_LINK_LIBRARIES      (${LibraryName}    		          ${CONAN_LIBS_GTEST} ${PackagesLibsPath})
TARGET_COMPILE_FEATURES    (${LibraryName} PUBLIC cxx_std_17)
